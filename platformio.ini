; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[base_config]
# WiFi
# [String] SSID for WiFi connection
wifi_ssid = YOUR_WIFI_SSID
# [String] Password for WiFi connection
wifi_pass = YOUR_WIFI_PASS

# OTA
# [String] The hostname for the ESP
ota_hostname = YOUR_OTA_HOSTNAME
# [String] The password used to authenticate OTA updates
ota_password =  YOUR_OTA_PASSWORD

# HMIS
# [String] The URL of the HMIS server, without a trailing slash
hmis_url = https://your.hmis.url
# [String] The token used to authenticate with HMIS
hmis_token = YOUR_HMIS_TOKEN
# [String] Id for lock in HMIS
lock_id = YOUR_LOCK_ID

# Auth
# [Long] The interval in seconds between each update of the authorised IDs cache
cache_update_interval = 1800
# [Boolean] If true, directly check with HMIS if the key is valid (Fallback to cache when without internet). If false,
#           always use the cache. In both cases, the cache is updated every 30 minutes.
live_check = false

# Unlock
# [Integer] The amount of time in seconds for the Lock to remain open, 0 to hold the Lock open indefinitely
unlock_delay = 5
# [Boolean] If true, buzz whilst the Lock is unlocked, note this will remain buzzing until the Lock is locked again
unlock_buzz = false
# [Integer] The amount of time in seconds to block any access attempt (RFID or Keypad) after a failed auth (Bad keycard
#           or Passcode)
bad_auth_delay = 3
# [Boolean] If true, allow the user to enter a keycode on a keypad built into the wiegand device to unlock. The code for
#           is defined in the option below.
enable_keypad_passcode = false
# [String, numbers only, Max length 8] A numerical keycode of length between 0 and 8 to use as an override password when
#                                      the RFID scanner is also a keypad.
#                                      When entering the passcode, press * (Star) to clear and # (hashtag) to submit.
keypad_passcode = 1234
# [boolean] If true, the button can be pressed when locked to unlock the Lock.
button_unlock = true
# [boolean] If true, the button can be pressed when unlocked to lock the Lock.
button_lock = false

# Pins
# [Integer] Wiegand Data 0
pin_d0  = 1
# [Integer] Wiegand Data 1
pin_d1  = 2
# [Integer] LED for indicating unlocked
pin_led_unlock = 3
# [Integer] LED for indicating locked
pin_led_lock = 4
# [Integer] Buzzer
pin_buzzer = 5
# [Integer] Button to lock
pin_button_lock = 6
# [Integer] Relay for lock
pin_relay = 7

# Pin Inversions
# [Boolean] If true, pin_led_unlock will be set to LOW to turn it on, and HIGH to turn it off.
#           If false, pin_led_unlock will be set to HIGH to turn it on, and LOW to turn it off.
invert_led_unlock = true

# [Boolean] If true, pin_led_lock will be set to LOW to turn it on, and HIGH to turn it off.
#           If false, pin_led_lock will be set to HIGH to turn it on, and LOW to turn it off.
invert_led_lock = true

# [Boolean] If true, pin_buzzer will be set to LOW to turn it on, and HIGH to turn it off.
#           If false, pin_buzzer will be set to HIGH to turn it on, and LOW to turn it off.
invert_buzzer = true

# [Boolean] If true, pin_relay will be set to LOW to turn it on, and HIGH to turn it off.
#           If false, pin_relay will be set to HIGH to turn it on, and LOW to turn it off.
invert_relay = true

build_flags =
  -DWIFI_SSID=${this.wifi_ssid}
  -DWIFI_PASS=${this.wifi_pass}
  -DOTA_HOST=${this.ota_hostname}
  -DOTA_PASS=${this.ota_password}
# This needs to be wrapped to avoid the "//" being treated like a comment
  -DHMIS_URL='"${this.hmis_url}"'
  -DHMIS_TOKEN=${this.hmis_token}
  -DCACHE_UPDATE_INTERVAL=${this.cache_update_interval}
  -DLIVE_CHECK=${this.live_check}
# This needs to be wrapped to avoid dropping leading zeros
  -DLOCK_ID='"${this.lock_id}"'
  -DUNLOCK_DELAY=${this.unlock_delay}
  -DUNLOCK_BUZZ=${this.unlock_buzz}
  -DBAD_AUTH_DELAY=${this.bad_auth_delay}
  -DENABLE_KEYPAD_PASSCODE=${this.enable_keypad_passcode}
# This needs to be wrapped to avoid dropping leading zeros
  -DKEYPAD_PASSCODE='"${this.keypad_passcode}"'
  -DBUTTON_UNLOCK=${this.button_unlock}
  -DBUTTON_LOCK=${this.button_lock}
  -DPIN_D0=${this.pin_d0}
  -DPIN_D1=${this.pin_d1}
  -DPIN_LED_UNLOCK=${this.pin_led_unlock}
  -DPIN_LED_LOCK=${this.pin_led_lock}
  -DPIN_BUZ=${this.pin_buzzer}
  -DPIN_BUT_LOCK=${this.pin_button_lock}
  -DPIN_REL=${this.pin_relay}
  -DINVERT_LED_UNLOCK=${this.invert_led_unlock}
  -DINVERT_LED_LOCK=${this.invert_led_lock}
  -DINVERT_BUZZER=${this.invert_buzzer}
  -DINVERT_RELAY=${this.invert_relay}

[env]
lib_deps =
  https://github.com/jtljac/YetAnotherArduinoWiegandLibrary-32-bit.git#2.1.0
monitor_speed = 115200

[config_dfrobot_firebeetle2_esp32e]
extends = base_config

# Pins
# Using SDA (21) and SCL (22) for d0 and d1 leads to problems detecting interrupts after a GET request
# Using D13 (12) can prevent serial communication during writing, best to avoid really
# Using A0 (39) or A1 (36) for interrupts can lead to them firing continiously, see https://github.com/espressif/esp-idf/issues/1096
pin_relay = 21
pin_d0 = 35
pin_d1 = 34
pin_button_lock = 15
pin_led_unlock = 4
pin_led_lock = 16
pin_buzzer = 17

[env:dfrobot_firebeetle2_esp32e]
platform = espressif32
board = dfrobot_firebeetle2_esp32e
framework = arduino
build_flags =
  ${config_dfrobot_firebeetle2_esp32e.build_flags}

[env:dfrobot_firebeetle2_esp32e_ota]
extends = env:dfrobot_firebeetle2_esp32e
upload_protocol = espota
upload_port = YOUR_ESP_IP
upload_flags =
  --auth=${config_dfrobot_firebeetle2_esp32e.ota_password}